/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Pebbles;

import org.junit.ComparisonFailure;
import org.junit.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Objects;
import java.util.Random;
import java.util.Scanner;

import static org.junit.Assert.*;

public class PebbleGameTest {
    private final ClassLoader classLoader = this.getClass().getClassLoader();

    @Test
    public void testRNG() throws FileNotFoundException, InterruptedException {
        String expectedOutput = null;
        PebbleGame pebbleGame;
        String result;
        for (int i = 0; i < 10; i++) {
            pebbleGame = new PebbleGame(1)
                    .setLogging(true)
                    .setRng(0)
                    .loadBag(BagEnum.X, Objects.requireNonNull(classLoader.getResource("ones.csv")).getFile())
                    .loadBag(BagEnum.Y, Objects.requireNonNull(classLoader.getResource("ones.csv")).getFile())
                    .loadBag(BagEnum.Z, Objects.requireNonNull(classLoader.getResource("ones.csv")).getFile())
                    .addPlayer("player0");
            pebbleGame.start();
            pebbleGame.join();
            result = new Scanner(new File("player0_log.txt")).useDelimiter("\\A").next();
            if (i == 0) {
                expectedOutput = result;
            } else {
                try {
                    assertEquals(expectedOutput, result);
                } catch (ComparisonFailure e) {
                    System.out.print("On trail: " + (i + 1));
                    throw e;
                }
            }
        }
    }

    @Test
    public void testBuilderMethods() {
        final Random rng = new Random();
        PebbleGame pebbleGame = new PebbleGame(2).setLogging(false);
        assertEquals(2, pebbleGame.getPlayers().capacity());
        assertEquals(0, pebbleGame.getPlayers().size());
        final PebbleGame.Player test_player1 = pebbleGame.new Player("TEST PLAYER 1");
        final PebbleGame.Player test_player2 = pebbleGame.new Player("TEST PLAYER 2");
        pebbleGame.setRng(rng)
                .addPlayer(test_player1);
        assertEquals(rng, pebbleGame.getRng());
        assertEquals(2, pebbleGame.getPlayers().capacity());
        assertEquals(1, pebbleGame.getPlayers().size());
        assertEquals(test_player1, pebbleGame.getPlayers().get(0));
        pebbleGame.addPlayer(test_player1).setPlayer(1, test_player2);
        assertEquals(2, pebbleGame.getPlayers().capacity());
        assertEquals(2, pebbleGame.getPlayers().size());
        assertEquals(test_player2, pebbleGame.getPlayers().get(1));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSetPlayerException() {
        PebbleGame pebbleGame = new PebbleGame(1).setLogging(false);
        final PebbleGame.Player test_player = pebbleGame.new Player("TEST PLAYER");
        pebbleGame.setPlayer(1, test_player);
    }
}
